include(ExternalProject)

# 3rdparty/reflecting-emscripten settings
set(FORCE_BLAZOR_EMSCRIPTEN_MATCH ON CACHE BOOL "")
set(FORCE_EMSCRIPTEN_VERSION "2.0.23" CACHE INTERNAL "")

add_subdirectory(reflecting-emscripten reflecting-emscripten)

set(WRAPPER_FILE_CONTENT [=[
set(PROJECT_SETTINGS_JSON_OVERRIDE
"{\n\
  \"CurrentProjectSetting\": \"${_CONFIG_}\"\n\
}"
)
file(WRITE "${_PROJECT_DIRECTORY_}/.vs/ProjectSettings.json" "${PROJECT_SETTINGS_JSON_OVERRIDE}")
]=])
	
set(WRAPPER_FILE_PATH "${CMAKE_CURRENT_BINARY_DIR}/cmake/wrapper/override_project_json.cmake" CACHE INTERNAL "")
file(WRITE "${WRAPPER_FILE_PATH}" "${WRAPPER_FILE_CONTENT}")

function(ADD_EMSCRIPTEN_PROJECT _CMAKE_SETTINGS_JSON_PATH_)
	cmake_path(GET _CMAKE_SETTINGS_JSON_PATH_ PARENT_PATH _PROJECT_DIRECTORY_)
	cmake_path(GET _PROJECT_DIRECTORY_ FILENAME _PROJECT_TARGET_NAME_)

	set(_THIS_PROJECT_BUILD_DIRECTORY_ "${_PROJECTS_BUILD_DIRECTORY_}/${_PROJECT_TARGET_NAME_}")
	configure_file("${_CMAKE_SETTINGS_JSON_PATH_}" "${_PROJECT_DIRECTORY_}/CMakeSettings.json")
	
	if(GENERATE_BUILD_ONLY_TARGETS)
		set(_PROJECT_EXT_SOURCE_DIR_ "${_PROJECT_DIRECTORY_}")
		set(_PROJECT_EXT_BINARY_DIR_ "${_THIS_PROJECT_BUILD_DIRECTORY_}/ext")
		set(_PROJECT_EXT_GE_BINARY_DIR_ "${_PROJECT_EXT_BINARY_DIR_}/build/WASM-$<CONFIG>")
		
		list(APPEND PROJECT_CMAKE_ARGS "-DCMAKE_BUILD_TYPE:STRING=WASM-$<CONFIG>") 
		list(APPEND PROJECT_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX:PATH=${_PROJECT_EXT_GE_BINARY_DIR_}/install")
		list(APPEND PROJECT_CMAKE_ARGS "-DCMAKE_TOOLCHAIN_FILE:FILEPATH=${EMSCRIPTEN_TOOLCHAIN_FILE}")
		list(APPEND PROJECT_CMAKE_ARGS "-DGENERATE_BUILD_ONLY_TARGETS:BOOL=${GENERATE_BUILD_ONLY_TARGETS}")
		
		ExternalProject_Add(${_PROJECT_TARGET_NAME_}
			DOWNLOAD_COMMAND  ""
			SOURCE_DIR        "${_PROJECT_EXT_SOURCE_DIR_}"
			BINARY_DIR        "${_PROJECT_EXT_BINARY_DIR_}"
			BUILD_COMMAND     "${CMAKE_COMMAND}" --build "${_PROJECT_EXT_GE_BINARY_DIR_}"
			CONFIGURE_COMMAND "${CMAKE_COMMAND}" -S "${_PROJECT_EXT_SOURCE_DIR_}" -B "${_PROJECT_EXT_GE_BINARY_DIR_}" -G "Ninja" ${PROJECT_CMAKE_ARGS}
			INSTALL_COMMAND	  ""
			TEST_COMMAND      ""
			BUILD_ALWAYS  	  1
			LOG_INSTALL		  1
		)
		
		unset(PROJECT_CMAKE_ARGS)
	endif()
	
	unset(_THIS_PROJECT_BUILD_DIRECTORY_)
endfunction()