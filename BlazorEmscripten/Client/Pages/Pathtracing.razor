@page "/"
@inject IJSRuntime JS

<PageTitle>Pathtracing</PageTitle>

<h1>Pathtracing in Blazor</h1>


@*without Blaozr canvas extension, it is not possible to access canvas properties with C# *@
<canvas tabindex="-1"
        @onmouseup="MouseClickUp"
        @onmousedown="MouseClickDown"
        @onmousemove="MouseMove"
        @onkeydown="KeyPress"
        width="1280" height="720" id="canvas"></canvas>

<p role="dialog">Controls: Change backgrounds with 1,2,3,4,5. Drag mouse to rotate. </p>



@code {
    protected Renderer renderer { get; set; }
    protected bool MouseHeldDown { get; set; }


    //user input
    protected void MouseMove(MouseEventArgs e)
    {
        //Console.WriteLine($"X = {e.ClientX} Y = {e.ClientY}");
        if(MouseHeldDown)
            renderer.Set_iMouse((float) e.ClientX, (float) e.ClientY);
    }


    protected void MouseClickDown(MouseEventArgs e)
    {
        MouseHeldDown = true;
    }


    protected void MouseClickUp(MouseEventArgs e)
    {
        MouseHeldDown = false;
    }


    private void KeyPress(KeyboardEventArgs args)
    {
        if(int.TryParse(args.Key, out int result) && result >= 0 && result < 6)
        {
            if(result == 5)
                renderer.change_cubemap();

            renderer.Set_iEnv(result);
        }
    }


    DateTime start;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            start = DateTime.Now;
            renderer = new Renderer(1280, 720);
            await JS.InvokeVoidAsync("initRenderLoop",  DotNetObjectReference.Create(this));
        }
    }


    [JSInvokable]
    public void RenderInBlazor()
    {
        //set time uniform in frag shader
        var timespan = start - DateTime.Now;
        renderer.Set_iTime((float) timespan.TotalSeconds);

        //render to active gl context - canvas
        renderer.render();
    }


}
