@page "/"
@inject IJSRuntime JS

<PageTitle>Pathtracing</PageTitle>

<h1>Pathtracing</h1>

<p role="dialog">Controls: Change background with 1,2,3,4,5. Drag mouse to rotate</p>

@*without Blaozr canvas extension, it is not possible to access canvas properties with C# *@
<canvas tabindex="-1"
        @onmouseup="MouseClickUp"
        @onmousedown="MouseClickDown"
        @onmousemove="MouseMove"
        @onkeydown="KeyPress"
        width="1280" height="720" id="canvas"></canvas>

<h4>@KeyPressed </h4>
<h4>@EventInfo</h4>
<h4>@MouseHeldDown</h4>

@code {
    protected Renderer renderer;
    protected string KeyPressed = "";
    protected string EventInfo = "";
    protected bool MouseHeldDown { get; set; }

    //user input
    protected void MouseMove(MouseEventArgs e)
    {
        //Console.WriteLine($"X = {e.ClientX} Y = {e.ClientY}");
        if(MouseHeldDown)
            renderer.Set_iMouse((float) e.ClientX, (float) e.ClientY);
    }
    protected void MouseClickDown(MouseEventArgs e)
    {
        MouseHeldDown = true;
    }
    protected void MouseClickUp(MouseEventArgs e)
    {
        MouseHeldDown = false;
    }
    private void KeyPress(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        EventInfo = "Event Type " + args.Type;
        if(int.TryParse(args.Key, out int result))
        {
            if(result >= 0 && result < 6)
            {
                if(result == 5)
                {
                    renderer.change_cubemap();
                }

                renderer.Set_iEnv(result);
            }

        }
    }


    DateTime start;
    //render loop
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            start = DateTime.Now;

            //await JS.InvokeVoidAsync("setupContext",  "canvas");
            renderer = new Renderer(1280, 720);
        }
        var timespan = start - DateTime.Now;
        float timeF = (float) timespan.TotalSeconds;
        //set time
        renderer.Set_iTime(timeF);

        //render
        renderer.render();
    }

    protected override bool ShouldRender() => true;
}
