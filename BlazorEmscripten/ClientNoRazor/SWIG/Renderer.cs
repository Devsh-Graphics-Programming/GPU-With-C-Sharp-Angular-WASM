//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Renderer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Renderer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Renderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Renderer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibRendererPINVOKE.delete_Renderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int m_shaders_loaded {
    set {
      LibRendererPINVOKE.Renderer_m_shaders_loaded_set(swigCPtr, value);
    } 
    get {
      int ret = LibRendererPINVOKE.Renderer_m_shaders_loaded_get(swigCPtr);
      return ret;
    } 
  }

  public uint getProgram() {
    uint ret = LibRendererPINVOKE.Renderer_getProgram(swigCPtr);
    return ret;
  }

  public void init() {
    LibRendererPINVOKE.Renderer_init(swigCPtr);
  }

  public Renderer(int w, int h) : this(LibRendererPINVOKE.new_Renderer(w, h), true) {
  }

  public void change_cubemap() {
    LibRendererPINVOKE.Renderer_change_cubemap(swigCPtr);
  }

  public void render() {
    LibRendererPINVOKE.Renderer_render(swigCPtr);
  }

  public void Set_iMouse(float x, float y) {
    LibRendererPINVOKE.Renderer_Set_iMouse(swigCPtr, x, y);
  }

  public void Set_iEnv(int env) {
    LibRendererPINVOKE.Renderer_Set_iEnv(swigCPtr, env);
  }

  public void Set_iTime(float t) {
    LibRendererPINVOKE.Renderer_Set_iTime(swigCPtr, t);
  }

}
